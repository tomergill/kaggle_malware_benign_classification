from itertools import product

INSTR_SET = {'mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha', 'pop', 'popf',
             'popa', 'ccombw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb', 'div', 'idiv', 'mul', 'imul',
             'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror', 'neg', 'not', 'and', 'or', 'xor', 'shl',
             'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je', 'jz', 'jcxz', 'jp', 'jpe', 'ja', 'jae', 'jb', 'jbe',
             'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo', 'jg', 'jge',
             'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns'}

i2NGRAM_DICT = {}
NGRAM2i_DICT = {}


def get_opcodes_from_asm_file(file_name):
    opcodes = []
    for line in file(file_name):
        if not line.startswith(".text"):
            continue
        line = line.split()
        if len(line) < 3:  # no opcode
            continue
        for s in line[2:]:
            if s in INSTR_SET:
                opcodes.append(s)
                break
    return opcodes


def make_ngrams_dict_for_n(n):
    i2NGRAM_DICT[n] = list(product(INSTR_SET, repeat=n))
    NGRAM2i_DICT[n] = {ngram: i for i, ngram in i2NGRAM_DICT[n]}


def make_ngrams_counters(lst, n):
    if n not in i2NGRAM_DICT:
        make_ngrams_dict_for_n(n)
    i2ngrams = i2NGRAM_DICT[n]  # ngram list
    ngram2i = NGRAM2i_DICT[n]  # maps ngram to it's index in above list

    counters = [0] * len(i2NGRAM_DICT)
    for i in xrange(0, len(lst) - n):
        ngram = tuple(lst[i:i + n])
        counters[ngram2i[ngram]] += 1
    return counters


def get_file_features(file_name):
    opcodes = get_opcodes_from_asm_file(file_name)
    counters = []
    for n in list(sorted(i2NGRAM_DICT.keys())):  # go over ngrams in order of n
        counters += make_ngrams_counters(opcodes, n)
    return counters
