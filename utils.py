from itertools import product
from os import listdir

i2instr = sorted(['mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha',
                        'pop', 'popf', 'popa', 'ccombw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb',
                        'div', 'idiv', 'mul', 'imul', 'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror',
                        'neg', 'not', 'and', 'or', 'xor', 'shl', 'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je',
                        'jz', 'jcxz', 'jp', 'jpe', 'ja', 'jae', 'jb',
                        'jbe', 'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo',
                        'jg', 'jge', 'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns'])
instr2i = {instr: i for i, instr in enumerate(i2instr)}
INSTR_SET = set(i2instr)
i2NGRAM_DICT = {}
NGRAM2i_DICT = {}


def get_opcodes_from_asm_file(file_name):
    opcodes = []
    for line in file(file_name):
        if not line.startswith(".text"):
            continue
        line = line.split()
        if len(line) < 3:  # no opcode
            continue
        for s in line[1:]:
            if s in INSTR_SET:
                opcodes.append(instr2i[s])
                break
            elif s == ';':
                break
    return opcodes


def make_ngrams_dict_for_n(n):
    i2NGRAM_DICT[n] = list(product(xrange(len(INSTR_SET)), repeat=n))

    def get_index_by_ngram(ngram):
        l = len(INSTR_SET)
        n = len(ngram)
        index = 0
        for i, x in enumerate(ngram):
            index += x * (l ** (n - i - 1))
        return index

    NGRAM2i_DICT[n] = get_index_by_ngram


def make_ngrams_counters(lst, n):
    if n not in i2NGRAM_DICT:
        make_ngrams_dict_for_n(n)
    i2ngrams = i2NGRAM_DICT[n]  # ngram list
    ngram2i = NGRAM2i_DICT[n]  # function that maps ngram to it's index in above list

    counters = [0] * len(i2NGRAM_DICT[n])
    for i in xrange(0, len(lst) - n):
        ngram = tuple(lst[i:i + n])
        counters[ngram2i(ngram)] += 1
    return counters


def get_file_features(file_name, ns):
    opcodes = get_opcodes_from_asm_file(file_name)
    counters = []
    for n in sorted(ns):  # go over ngrams in order of n
        counters += make_ngrams_counters(opcodes, n)
    return counters


def get_features_of_all_asm_files_in_folder(path_to_folder, ns):
    files = listdir(path_to_folder)
    features = []
    for f in files:
        if f.endswith(".asm"):
            features.append(get_file_features(path_to_folder + "/" + f, ns))
            pass
    return features


# checks
if __name__ == '__main__':
    x = get_features_of_all_asm_files_in_folder("./files/train50", [4])
    print len(x)
    print len(x[0])
    for i in range(3):
        print "****************************"
        print x[i]
