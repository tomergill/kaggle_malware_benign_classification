import xgboost as xgb
from os import getcwd
from time import time
import sys
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier

def learn_with_XGBClassifier(train_data, train_lbl, test_files, test_lbl, lr,n_esti,seed):
    train_time = time()
    xg_cl = xgb.XGBClassifier(objective='binary:logistic', learning_rate=lr,
                                    n_estimators=n_esti, seed=seed)
    xg_cl.fit(train_data, train_lbl)
    train_time = time() - train_time
    test_time = time()
    preds = xg_cl.predict(test_files)
    test_time = time() - test_time
    accuracy = float(np.sum(preds == test_lbl)) / test_lbl.shape[0]
    return {"train time: ": train_time, "test time: ": test_time, "accuracy: ": accuracy*100}

def learn_with_dt(train_files, train_lbl, test_file, test_lbl):
    train_time = time()
    xg_dt = DecisionTreeClassifier()
    xg_dt = xg_dt.fit(train_files, train_lbl)
    train_time = time() - train_time
    test_time = time()
    preds = xg_dt.predict(test_file)
    test_time = time() - test_time
    accuracy = float(np.sum(preds == test_lbl)) / test_lbl.shape[0]
    return {"train time: ": train_time, "test time: ": test_time, "accuracy: ": accuracy*100}


def learn_with_cv(train_files, train_lbl, test_files, test_lbl):
    '''churn_dmatrix = xgb.DMatrix(data = np.concatenate((test_img, train_img)),
                                label= np.concatenate((train_lbl, test_lbl)))
    params = {"objective": "binary:logistic", "max_depth": 4}
    cv_results = xgb.cv(dtrain=churn_dmatrix, params=params, nfold=4, num_boost_round=10,
                       metrics="error", as_pandas=True)'''
    dmat = xgb.DMatrix(np.concatenate((train_files, test_files)), label=np.concatenate((train_lbl, test_lbl)))
    params = {"max_depth": 4, "objective": "multi:softmax", "num_class": 10}
    cv_results = xgb.cv(params, dmat, 10, 3, metrics="error", seed=123)
    print("Accuracy: %f" % ((1 - cv_results["test-error-mean"]).iloc[-1]))


def main():
    print("start processing input")
    



if __name__ == "__main__":
    main()