import xgboost as xgb
from time import time
import numpy as np
#import pandas as pd
from utils import get_all_files_features_and_labels, seperate_to_train_and_test
from sklearn.model_selection import train_test_split

def learn_with_XGBClassifier(train_data, train_lbl, test_files, test_lbl, lr=0.22,n_esti=40,seed=123):
    train_time = time()
    xg_cl = xgb.XGBClassifier(objective='multi:softmax', num_class= 10, learning_rate=lr,
                                    n_estimators=n_esti, seed=seed)
    xg_cl.fit(train_data, train_lbl)
    train_time = time() - train_time
    test_time = time()
    preds = xg_cl.predict(test_files)
    test_time = time() - test_time
    accuracy = float(np.sum(preds == test_lbl)) / test_lbl.shape[0]
    return {"train time: ": train_time, "test time: ": test_time, "accuracy: ": accuracy*100}

def learn_with_dt(train_files, train_lbl, test_file, test_lbl):
    train_time = time()
    xg_dt = DecisionTreeClassifier()
    xg_dt = xg_dt.fit(train_files, train_lbl)
    train_time = time() - train_time
    test_time = time()
    preds = xg_dt.predict(test_file)
    test_time = time() - test_time
    accuracy = float(np.sum(preds == test_lbl)) / test_lbl.shape[0]
    return {"train time: ": train_time, "test time: ": test_time, "accuracy: ": accuracy*100}


def learn_with_cv(X,Y):
    churn_dmatrix = xgb.DMatrix(X,Y)
    params = {"objective": "multi:softmax", "max_depth": 4, "num_class":10}
    cv_results = xgb.cv(dtrain=churn_dmatrix, params=params, nfold=6, num_boost_round=30,
                       metrics="merror", as_pandas=True)
    return ((1 - cv_results["test-merror-mean"]).iloc[-1])





def main():
    print("start processing input")
    features, labels, ngrams_sets, i2ngram, ngram2i, labels_dict = get_all_files_features_and_labels("./files/train50", "./files/benign50", [4])
    X, Y = np.array(features), np.array(labels)
    #X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.5, random_state=111)
    X_train, X_test, y_train, y_test = seperate_to_train_and_test(features,labels)
    X_train, X_test, y_train, y_test = (np.array(X_train) > 0).astype(int), (np.array(X_test) > 0).astype(int), np.array(y_train), np.array(y_test),
    print("start learning...")
    print (learn_with_XGBClassifier(X_train, y_train, X_test, y_test))
    pass
    #print("strat learning cv")
    #print(learn_with_cv(X,Y)*100)

if __name__ == "__main__":
    main()
